'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.initActions = initActions;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Actions = function () {
  function Actions(tide) {
    _classCallCheck(this, Actions);

    this.tide = tide;
    this.namespace = this.namespace || [];
  }

  Actions.prototype.getState = function getState() {
    return this.get([]);
  };

  Actions.prototype.setState = function setState(state, options) {
    this.setGlobalState(this.getGlobalState().setIn(this.namespace, state), options);
  };

  Actions.prototype.updateState = function updateState(updater, options) {
    this.setState(updater(this.getState()), options);
  };

  Actions.prototype.mutate = function mutate(keyPath, value, options) {
    this.tide.mutate(this._createKeyPath(keyPath), value, options);
  };

  Actions.prototype.get = function get(keyPath) {
    return this.tide.get(this._createKeyPath(keyPath));
  };

  Actions.prototype.getActions = function getActions(name) {
    return this.tide.getActions(name);
  };

  Actions.prototype.getGlobalState = function getGlobalState() {
    return this.tide.getState();
  };

  Actions.prototype.setGlobalState = function setGlobalState(state, options) {
    this.tide.setState(state, options);
  };

  Actions.prototype.updateGlobalState = function updateGlobalState(updater, options) {
    this.setGlobalState(updater(this.getGlobalState()), options);
  };

  Actions.prototype.mutateGlobal = function mutateGlobal(keyPath, value, options) {
    this.tide.mutate(keyPath, value, options);
  };

  Actions.prototype.getGlobal = function getGlobal(keyPath) {
    return this.tide.get(keyPath);
  };

  Actions.prototype._createKeyPath = function _createKeyPath(keyPath) {
    var kp = Array.isArray(keyPath) ? keyPath : keyPath.split('.');
    return this.namespace.concat(kp);
  };

  return Actions;
}();

exports.default = Actions;
function initActions(tide, actions) {
  var initializedActions = Object.keys(actions).reduce(function (obj, key) {
    var _extends2;

    return _extends({}, obj, (_extends2 = {}, _extends2[key] = new actions[key](tide), _extends2));
  }, {});
  tide.addProp('actions', initializedActions);
  tide.addProp('getActions', function getActions(name) {
    return name ? initializedActions[name] : initializedActions;
  });
  tide.addComponentProp('actions', tide.actions);
}