'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function defer(fn) {
  setTimeout(fn, 1);
}

function getNextState(oldState, newState) {
  return newState;
}

function getMiddewareFn(middleware) {
  return middleware ? middleware.reduce(function (fn, middle) {
    return middle(fn);
  }, getNextState) : getNextState;
}

var Tide = function () {
  function Tide() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$middleware = _ref.middleware,
        middleware = _ref$middleware === undefined ? [] : _ref$middleware;

    _classCallCheck(this, Tide);

    this.state = null;
    this.changeHandlers = [];
    this._componentProps = {};

    this.middleware = middleware;
    this.middlewareFn = getMiddewareFn(this.middleware);
  }

  Tide.prototype.getState = function getState() {
    return this.state;
  };

  Tide.prototype.setState = function setState(state, options) {
    this.state = this.middlewareFn(this.state, state);
    this.emitChange(options);
  };

  Tide.prototype.updateState = function updateState(updater, options) {
    this.setState(updater(this.state), options);
  };

  Tide.prototype.mutate = function mutate(keyPath, value, options) {
    var kp = Array.isArray(keyPath) ? keyPath : keyPath.split('.');
    var val = typeof value === 'function' ? value(this.getState().getIn(kp)) : value;
    this.setState(this.getState().setIn(kp, val), options);
  };

  Tide.prototype.get = function get(keyPath) {
    var kp = Array.isArray(keyPath) ? keyPath : keyPath.split('.');
    return this.getState().getIn(kp);
  };

  Tide.prototype.addMiddleware = function addMiddleware(newMiddleware) {
    this.middleware = [].concat(this.middleware, [newMiddleware]);
    this.middlewareFn = getMiddewareFn(this.middleware);
  };

  Tide.prototype.addProp = function addProp(name, prop) {
    if (process.env.NODE_ENV !== 'production' && this[name]) {
      throw new Error('Naming conflict, ' + name + ' is already defined');
    }
    this[name] = prop;
  };

  Tide.prototype.addComponentProp = function addComponentProp(name, obj) {
    if (process.env.NODE_ENV !== 'production' && this._componentProps[name]) {
      throw new Error('Naming conflict, ' + name + ' is already defined');
    }
    this._componentProps[name] = obj;
  };

  Tide.prototype.getComponentProps = function getComponentProps() {
    return this._componentProps;
  };

  Tide.prototype.onChange = function onChange(handler) {
    this.changeHandlers.push(handler);
  };

  Tide.prototype.offChange = function offChange(handler) {
    var _this = this;

    this.changeHandlers.forEach(function (fn, i) {
      if (handler === fn) {
        _this.changeHandlers.splice(i, 1);
        return false;
      }
    });
  };

  Tide.prototype.emit = function emit() {
    this.changeHandlers.forEach(function (fn) {
      fn && fn();
    });
  };

  Tide.prototype.emitChange = function emitChange() {
    var _this2 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (options.immediate) {
      this.emit();
    } else if (!this._willEmit) {
      this._willEmit = true;
      defer(function () {
        _this2._willEmit = false;
        _this2.emit();
      });
    }
  };

  return Tide;
}();

exports.default = Tide;